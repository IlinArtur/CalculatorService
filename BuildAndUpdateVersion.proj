<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" DefaultTargets="Octopus">
  <PropertyGroup>
    <Version>1.0.0.0</Version>
    <TeamCity Condition="'$(TeamCity)' == ''">false</TeamCity>
    <Configuration Condition="'$(Configuration)' == ''">Release</Configuration>
    <OutputPath Condition="'$(OutputPath)' == ''">bin\$(Configuration)\</OutputPath>
    <WhatIf>false</WhatIf>
    <IsNewRelease>false</IsNewRelease>
    <VisualStudioVersion>14.0</VisualStudioVersion>
    <BranchName></BranchName>
    <IsDefaultBranch Condition="'$(IsDefaultBranch)' == ''">true</IsDefaultBranch>
    <OctopusToolsPath>packages\OctopusTools.4.5.2\tools\Octo.exe</OctopusToolsPath>
    <MSBuildCommunityTasksPath>packages\MSBuildTasks.1.5.0.214\tools\MSBuild.Community.Tasks.Targets</MSBuildCommunityTasksPath>
    <NUnit3Path>nunit3-console.exe</NUnit3Path>
    <TeamCityUrl></TeamCityUrl>
    <TCUserName></TCUserName>
    <TCUserPassword></TCUserPassword>
    <BuildNumberSuffix>build.$(Build)</BuildNumberSuffix>
    <PackageSuffix><!--NoAdditionalTags--></PackageSuffix>    
    <OctopusServer></OctopusServer>
    <ApiKey></ApiKey>
  </PropertyGroup>  
  <PropertyGroup Condition="!$(IsDefaultBranch)">
    <PackageSuffix>$(BranchName.Replace('-', '.')).build.$(Build)</PackageSuffix>
    <BuildNumberSuffix>$(PackageSuffix)</BuildNumberSuffix>
  </PropertyGroup>
  
  <Import Project="$(MSBuildCommunityTasksPath)" Condition="Exists('$(MSBuildCommunityTasksPath)')" />

  <Target Name="Octopus" DependsOnTargets="EnsureNuGetPackageBuildImports;BuildAndTest;DetectNewRelease;CreateNewRelease">
  </Target>
  
  <Target Name="EnsureNuGetPackageBuildImports" Condition="$(TeamCity)">
    <PropertyGroup>
      <ErrorText>
        This project references NuGet package(s) that are missing on this computer. Use NuGet Package Restore to download them. 
        For more information, see http://go.microsoft.com/fwlink/?LinkID=322105. The missing file is {0}.
      </ErrorText>
    </PropertyGroup>
    <Error Condition="!Exists('$(MSBuildCommunityTasksPath)')" 
           Text="$([System.String]::Format('$(ErrorText)', '$(MSBuildCommunityTasksPath)'))" />
  </Target>
  
  <Target Name="BuildAndTest" DependsOnTargets="Build;RunTests">
  </Target>

  <Target Name="Build">
    <MSBuild Projects="CalculatorService.sln"
      Properties="OutputPath=$(OutputPath);Configuration=$(Configuration);" BuildInParallel="true"
    />
    <TeamCitySetBuildNumber BuildNumber="$(Version)-$(BuildNumberSuffix)" Condition="$(TeamCity)"/>
  </Target>

  <Target Name="RunTests">
    <ItemGroup>
      <Tests Include="**\$(OutputPath)*Tests.dll" />
    </ItemGroup>
    <PropertyGroup>
      <teamcityOpt Condition="$(TeamCity)">--teamcity</teamcityOpt>
    </PropertyGroup>
    <Exec IgnoreExitCode="True" Command="$(Nunit3Path) @(Tests) $(teamcityOpt)">
      <Output TaskParameter="ExitCode" ItemName="exitCode" />
    </Exec>
    <Error Text="Error while running tests" Condition="@(exitCode) &lt; 0" />
  </Target>

  <Target Name="DetectNewRelease" DependsOnTargets="BranchBuildNumber;DefaultBranchBuildNumber" Condition="$(TeamCity) AND !$(IsNewRelease)">
    <PropertyGroup>
      <IsNewRelease Condition="('$(PreviousBuildNumber)' != '') AND !$(PreviousBuildNumber.Contains('$(Version)'))">true</IsNewRelease>
    </PropertyGroup>
    <Message Text="IsNewRelease: '$(IsNewRelease)'" />
  </Target>

  <Target Name="BranchBuildNumber" Condition="!$(IsDefaultBranch)">
    <PropertyGroup>
      <PreviousBuildsFile>PREV_VERSION.xml</PreviousBuildsFile>
    </PropertyGroup>
    <Message Text="Prevous develop build '$(PreviousBuildNumber)'" />
    <HttpRequest Url="$(TeamCityUrl)/httpAuth/app/rest/builds/?locator=project:(id:CalculatorForOctopus),branch:$(BranchName),count:1&amp;fields=build(number)"
                 Username="$(TCUserName)"
                 Password="$(TCUserPassword)"
                 WriteResponseTo="$(PreviousBuildsFile)"
                 FailOnNon2xxResponse="true"/>
    <PropertyGroup>
      <PreviousBranchBuildNumber>$([System.IO.File]::ReadAllText('$(PreviousBuildsFile)'))</PreviousBranchBuildNumber>
    </PropertyGroup>
  </Target>

  <Target Name="DefaultBranchBuildNumber" Condition="'$(PreviousBuildNumber)' == '' OR $(PreviousBuildNumber.Contains('&lt;builds/&gt;'))">
    <PropertyGroup>
      <PreviousBuildsFile>PREV_VERSION.xml</PreviousBuildsFile>
    </PropertyGroup>
    <HttpRequest Url="$(TeamCityUrl)/httpAuth/app/rest/builds/?locator=project:(id:CalculatorForOctopus),branch:master,count:1&amp;fields=build(number)"
                 Username="$(TCUserName)"
                 Password="$(TCUserPassword)"
                 WriteResponseTo="$(PreviousBuildsFile)"
                 FailOnNon2xxResponse="true" />
    <PropertyGroup>
      <PreviousBuildNumber>$([System.IO.File]::ReadAllText('$(PreviousBuildsFile)'))</PreviousBuildNumber>
    </PropertyGroup>
  </Target>

  <Target Name="CreateNewRelease" Condition="$(IsNewRelease)" DependsOnTargets="EnsureOctopusToolsImports;RunOctopack">
    <PropertyGroup>
      <serverOpt>--server $(OctopusServer)</serverOpt>
      <apiKeyOpt>--apiKey=$(ApiKey)</apiKeyOpt>
      <serviceMessages Condition="$(TeamCity)">--enableServiceMessages</serviceMessages>
      <PackageExistsExitCode>-7</PackageExistsExitCode>
    </PropertyGroup>
    <ItemGroup Condition="$(IsDefaultBranch)">
      <Packages Include="**\$(OutputPath)*$(PackageSuffix).nupkg" Exclude="**\$(OutputPath)*-*.nupkg" />
    </ItemGroup>
    <ItemGroup Condition="!$(IsDefaultBranch)">
      <Packages Include="**\$(OutputPath)*$(PackageSuffix).nupkg" />
    </ItemGroup>
    <Message Condition="$(WhatIf)" Text="Pushing Package: %(Packages.FileName)%(Packages.Extension)"/>
    <Exec Condition="!$(WhatIf)" IgnoreExitCode="true" Command="$(OctopusToolsPath) push --package @(Packages, ' --package ') $(serverOpt) $(apiKeyOpt) $(serviceMessages)">
      <Output TaskParameter="ExitCode" PropertyName="exitCode"/>
    </Exec>
    <Error Text="Error Pushing Packages To Octopus" Condition="$(exitCode) != '' AND $(exitCode) != $(PackageExistsExitCode) AND $(exitCode) != 0" />
    
    <PropertyGroup>
      <projectName>--project=TestProject</projectName>
      <whatIfOpt Condition="$(WhatIf)">--whatif</whatIfOpt>
      <release>--version $(Version)</release>
      <channel>--channel FinalTesting</channel>
      <ignorePackageExists>--ignoreexisting</ignorePackageExists>
    </PropertyGroup>
    <PropertyGroup Condition="!$(IsDefaultBranch)">
      <channel>--channel "Test in branch"</channel>
      <release>--version $(Version)-$(PackageSuffix)</release>
      <prereleasePackage>--packageprerelease $(BranchName.Replace('-','.'))</prereleasePackage>
    </PropertyGroup>
    <Exec Command="$(OctopusToolsPath) create-release $(release) $(channel) $(projectName) $(serverOpt) $(apiKeyOpt) $(serviceMessages) $(whatIfOpt) $(ignorePackageExists) $(prereleasePackage)" />
  </Target>

  <Target Name="EnsureOctopusToolsImports" Condition="$(IsNewRelease)">
    <PropertyGroup>
      <ErrorText>
        This project references NuGet package(s) that are missing on this computer. Use NuGet Package Restore to download them. 
        For more information, see http://go.microsoft.com/fwlink/?LinkID=322105. The missing file is {0}.
      </ErrorText>
    </PropertyGroup>
    <Error Condition="!Exists('$(OctopusToolsPath)')" 
           Text="$([System.String]::Format('$(ErrorText)', '$(OctopusToolsPath)'))" />
  </Target>

  <Target Name="RunOctopack" Outputs="%(Projects.RelativeDir)%(Projects.FileName).nuspec" DependsOnTargets="GatherProjectsList">    
    <PropertyGroup>
      <CurrentProject>%(Projects.FileName)</CurrentProject>
      <PackageHeader>
        <metadata>
          <id>$(CurrentProject)</id>
          <version>$version$</version>
          <authors>artur.i</authors>
          <description>The $(CurrentProject) deployment package</description>
          <releaseNotes></releaseNotes>
        </metadata>
      </PackageHeader>
      <PackageFiles>
        <file src="$(OutputPath)*.*" target="bin" />
        <file src="*.svc" />
        <file src="Web.config" />        
      </PackageFiles>
      <CalculatorserviceSpecific Condition="'$(CurrentProject)' == 'CalculatorService'">
        <file src="Global.asax" />
        <file src="..\Web.Octopus.config" />
      </CalculatorserviceSpecific>
      <NuSpecPackage>
        <package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">          
          $(PackageHeader)
          <files>
            $(PackageFiles)
            $(CalculatorserviceSpecific)
          </files>
        </package>
      </NuSpecPackage>      
    </PropertyGroup>
    <WriteLinesToFile Lines="$(NuSpecPackage)" File="%(Projects.RelativeDir)%(Projects.FileName).nuspec" Overwrite="true"/>
    <MSBuild Targets="OctoPack" Projects="%(Projects.RelativeDir)%(Projects.FileName)%(Projects.Extension)" 
      Properties="OutputPath=$(OutputPath);
        Configuration=$(Configuration);
        VisualStudioVersion=$(VisualStudioVersion);
        RunOctoPack=true;
        OctoPackAppendToVersion=$(PackageSuffix);
        OctoPackPublishPackagesToTeamCity=false;
        OctoPackPublishPackageToFileShare=$(PackagesFileShare)"
    />
  </Target>
  
  <Target Name="GatherProjectsList">
    <ItemGroup>
      <Projects Include="**\CalculatorService.csproj;**\ServiceA.csproj;**\ServiceB.csproj;" />
    </ItemGroup>
  </Target>
</Project>
